// Code generated by "stringer -type=RuleId"; DO NOT EDIT.

package analyzer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[validateOffsetAndLimitId-0]
	_ = x[validateCreateTableId-1]
	_ = x[resolveVariablesId-2]
	_ = x[resolveNamedWindowsId-3]
	_ = x[resolveSetVariablesId-4]
	_ = x[resolveViewsId-5]
	_ = x[liftCtesId-6]
	_ = x[resolveCtesId-7]
	_ = x[liftRecursiveCtesId-8]
	_ = x[resolveDatabasesId-9]
	_ = x[resolveTablesId-10]
	_ = x[loadStoredProceduresId-11]
	_ = x[validateDropTablesId-12]
	_ = x[setTargetSchemasId-13]
	_ = x[resolveCreateLikeId-14]
	_ = x[parseColumnDefaultsId-15]
	_ = x[resolveDropConstraintId-16]
	_ = x[validateDropConstraintId-17]
	_ = x[loadCheckConstraintsId-18]
	_ = x[resolveCreateSelectId-19]
	_ = x[resolveSubqueriesId-20]
	_ = x[resolveUnionsId-21]
	_ = x[resolveDescribeQueryId-22]
	_ = x[checkUniqueTableNamesId-23]
	_ = x[resolveTableFunctionsId-24]
	_ = x[resolveDeclarationsId-25]
	_ = x[validateCreateTriggerId-26]
	_ = x[validateCreateProcedureId-27]
	_ = x[assignInfoSchemaId-28]
	_ = x[validateReadOnlyDatabaseId-29]
	_ = x[validateReadOnlyTransactionId-30]
	_ = x[validateDatabaseSetId-31]
	_ = x[checkPriviledgesId-32]
	_ = x[stripDecorationsId-33]
	_ = x[unresolveTablesId-34]
	_ = x[resolveNaturalJoinsId-35]
	_ = x[resolveOrderbyLiteralsId-36]
	_ = x[resolveFunctionsId-37]
	_ = x[flattenTableAliasesId-38]
	_ = x[pushdownSortId-39]
	_ = x[pushdownGroupbyAliasesId-40]
	_ = x[pushdownSubqueryAliasFiltersId-41]
	_ = x[qualifyColumnsId-42]
	_ = x[resolveColumnsId-43]
	_ = x[resolveColumnDefaultsId-44]
	_ = x[validateCheckConstraintId-45]
	_ = x[resolveBarewordSetVariablesId-46]
	_ = x[expandStarsId-47]
	_ = x[resolveHavingId-48]
	_ = x[mergeUnionSchemasId-49]
	_ = x[flattenAggregationExprsId-50]
	_ = x[reorderProjectionId-51]
	_ = x[resolveSubqueryExprsId-52]
	_ = x[replaceCrossJoinsId-53]
	_ = x[moveJoinCondsToFilterId-54]
	_ = x[evalFilterId-55]
	_ = x[optimizeDistinctId-56]
	_ = x[finalizeSubqueriesId-57]
	_ = x[finalizeUnionsId-58]
	_ = x[loadTriggersId-59]
	_ = x[processTruncateId-60]
	_ = x[validateAlterColumnId-61]
	_ = x[resolveGeneratorsId-62]
	_ = x[removeUnnecessaryConvertsId-63]
	_ = x[assignCatalogId-64]
	_ = x[pruneColumnsId-65]
	_ = x[optimizeJoinsId-66]
	_ = x[pushdownFiltersId-67]
	_ = x[subqueryIndexesId-68]
	_ = x[inSubqueryIndexesId-69]
	_ = x[pushdownProjectionsId-70]
	_ = x[setJoinScopeLenId-71]
	_ = x[eraseProjectionId-72]
	_ = x[insertTopNId-73]
	_ = x[cacheSubqueryResultsId-74]
	_ = x[cacheSubqueryAliasesInJoinsId-75]
	_ = x[applyHashLookupsId-76]
	_ = x[applyHashInId-77]
	_ = x[resolveInsertRowsId-78]
	_ = x[applyTriggersId-79]
	_ = x[applyProceduresId-80]
	_ = x[assignRoutinesId-81]
	_ = x[modifyUpdateExprsForJoin-82]
	_ = x[applyRowUpdateAccumulators-83]
	_ = x[validateResolvedId-84]
	_ = x[validateOrderById-85]
	_ = x[validateGroupById-86]
	_ = x[validateSchemaSourceId-87]
	_ = x[validateIndexCreationId-88]
	_ = x[validateOperandsId-89]
	_ = x[validateCaseResultTypesId-90]
	_ = x[validateIntervalUsageId-91]
	_ = x[validateExplodeUsageId-92]
	_ = x[validateSubqueryColumnsId-93]
	_ = x[validateUnionSchemasMatchId-94]
	_ = x[validateAggregationsId-95]
	_ = x[TrackProcessId-96]
	_ = x[parallelizeId-97]
	_ = x[clearWarningsId-98]
}

const _RuleId_name = "validateOffsetAndLimitIdvalidateCreateTableIdresolveVariablesIdresolveNamedWindowsIdresolveSetVariablesIdresolveViewsIdliftCtesIdresolveCtesIdliftRecursiveCtesIdresolveDatabasesIdresolveTablesIdloadStoredProceduresIdvalidateDropTablesIdsetTargetSchemasIdresolveCreateLikeIdparseColumnDefaultsIdresolveDropConstraintIdvalidateDropConstraintIdloadCheckConstraintsIdresolveCreateSelectIdresolveSubqueriesIdresolveUnionsIdresolveDescribeQueryIdcheckUniqueTableNamesIdresolveTableFunctionsIdresolveDeclarationsIdvalidateCreateTriggerIdvalidateCreateProcedureIdassignInfoSchemaIdvalidateReadOnlyDatabaseIdvalidateReadOnlyTransactionIdvalidateDatabaseSetIdcheckPriviledgesIdstripDecorationsIdunresolveTablesIdresolveNaturalJoinsIdresolveOrderbyLiteralsIdresolveFunctionsIdflattenTableAliasesIdpushdownSortIdpushdownGroupbyAliasesIdpushdownSubqueryAliasFiltersIdqualifyColumnsIdresolveColumnsIdresolveColumnDefaultsIdvalidateCheckConstraintIdresolveBarewordSetVariablesIdexpandStarsIdresolveHavingIdmergeUnionSchemasIdflattenAggregationExprsIdreorderProjectionIdresolveSubqueryExprsIdreplaceCrossJoinsIdmoveJoinCondsToFilterIdevalFilterIdoptimizeDistinctIdfinalizeSubqueriesIdfinalizeUnionsIdloadTriggersIdprocessTruncateIdvalidateAlterColumnIdresolveGeneratorsIdremoveUnnecessaryConvertsIdassignCatalogIdpruneColumnsIdoptimizeJoinsIdpushdownFiltersIdsubqueryIndexesIdinSubqueryIndexesIdpushdownProjectionsIdsetJoinScopeLenIderaseProjectionIdinsertTopNIdcacheSubqueryResultsIdcacheSubqueryAliasesInJoinsIdapplyHashLookupsIdapplyHashInIdresolveInsertRowsIdapplyTriggersIdapplyProceduresIdassignRoutinesIdmodifyUpdateExprsForJoinapplyRowUpdateAccumulatorsvalidateResolvedIdvalidateOrderByIdvalidateGroupByIdvalidateSchemaSourceIdvalidateIndexCreationIdvalidateOperandsIdvalidateCaseResultTypesIdvalidateIntervalUsageIdvalidateExplodeUsageIdvalidateSubqueryColumnsIdvalidateUnionSchemasMatchIdvalidateAggregationsIdTrackProcessIdparallelizeIdclearWarningsId"

var _RuleId_index = [...]uint16{0, 24, 45, 63, 84, 105, 119, 129, 142, 161, 179, 194, 216, 236, 254, 273, 294, 317, 341, 363, 384, 403, 418, 440, 463, 486, 507, 530, 555, 573, 599, 628, 649, 667, 685, 702, 723, 747, 765, 786, 800, 824, 854, 870, 886, 909, 934, 963, 976, 991, 1010, 1035, 1054, 1076, 1095, 1118, 1130, 1148, 1168, 1184, 1198, 1215, 1236, 1255, 1282, 1297, 1311, 1326, 1343, 1360, 1379, 1400, 1417, 1434, 1446, 1468, 1497, 1515, 1528, 1547, 1562, 1579, 1595, 1619, 1645, 1663, 1680, 1697, 1719, 1742, 1760, 1785, 1808, 1830, 1855, 1882, 1904, 1918, 1931, 1946}

func (i RuleId) String() string {
	if i < 0 || i >= RuleId(len(_RuleId_index)-1) {
		return "RuleId(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RuleId_name[_RuleId_index[i]:_RuleId_index[i+1]]
}
